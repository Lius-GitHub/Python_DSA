# 242. Valid Anagram
# Time Complexity: O(n)
# Space Complexity: O(1)
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t): return False
        record = [0] * 26
        for i in s:
            record[ord(i) - ord('a')] += 1
        for i in t:
            record[ord(i) - ord('a')] -= 1
        for i in range(26):
            if record[i] != 0:
                return False
        return True

# from collections import Counter
# class Solution:
#     def isAnagram(self, s: str, t: str) -> bool:
#         # Counter creates a hash map of {char: count}
#         # Comparing two Counter objects checks for equal keys and equal values.
#         return Counter(s) == Counter(t)

# 349. Intersection of Two Arrays
# Time Complexity: O(m+n)
# Space Complexity: O(m) or O(n) depending on which list is bigger
class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        set1 = set(nums1)
        res = []
        for num in nums2:
            if num in set1:
                res.append(num)
                set1.remove(num)
        return res

# # Time Complexity: O(m+n)
# # Space Complexity: O(m+n)
# class Solution:
#     def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
#         # Create a set from each list
#         set1 = set(nums1)
#         set2 = set(nums2)     
#         # Return the intersection of the two sets, converted to a list
#         return list(set1 & set2)

# 202. Happy Number
# Time Complexity: O(log n)
# Space Complexity: O(log n)
class Solution:
    def isHappy(self, n: int) -> bool:
        
        def get_next (num: int) -> int:
            sum = 0
            while num > 0:
                digit = num % 10
                sum += digit ** 2
                num = num // 10
            return sum

        seen = set()
        while n != 1 and n not in seen:
            seen.add(n)
            n = get_next(n)
        return n == 1
            

# 1. Two Sum
# Time Complexity: O(n)
# Space Complexity: O(n)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        visited = {} # num: index
        for index, value in enumerate(nums):
            complement = target - value
            if complement in visited:
                return [visited[complement], index]
            visited[value] = index
        return None # Should not reach here if exactly one solution exists


# 454. 4Sum II 
# Time Complexity: O(n)
# Space Complexity: O(n)       
class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        sum12 = {} #num1+num2: times
        count = 0
        for n1 in nums1:
            for n2 in nums2:
                sum12[n1+n2] = sum12.get(n1+n2, 0) + 1
                # if n1 + n2 in sum12:
                #     sum12[n1+n2] +=1
                # else:
                #     sum12[n1+n2] = 1
            # we need to find n3+n4 = -(n1+n2)
        for n3 in nums3:
            for n4 in nums4:
                key = -n3-n4
                if key in sum12:
                    count += sum12[key]
        return count
        
# 383. Ransom Note
# Time complexity: O(m+n)
# Space complexity: O(m)
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        count_magazine = {} # char: frequency
        for c in magazine:
            count_magazine[c] = count_magazine.get(c, 0) + 1
        for c in ransomNote:
            if c not in count_magazine or count_magazine[c] ==0:
                return False
            else:
                count_magazine[c] -= 1
        return True        

# 15. 3Sum
# Time complexity: O(n^2)
# Space complexity: O(1) (excluding output)
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = []
        nums.sort()
        for i in range(len(nums)):
            if(nums[i]) > 0 :
                return result
            # Skip duplicate values for the first number to avoid duplicate triplets
            if i> 0 and nums[i] == nums[i-1]:
                continue 
            left = i + 1
            right = len(nums) - 1
            while left < right:
                sum = nums[i] + nums[left] + nums[right]
                if sum == 0:
                    result.append([nums[i], nums[left], nums[right]])
                    # Skip duplicates for the second number
                    while left < right and nums[left] == nums[left+1]:
                        left += 1
                    # Skip duplicates for the third number
                    while right > left and nums[right] == nums[right-1]:
                        right -= 1
                    # Move both pointers after finding a valid triplet
                    left += 1
                    right -= 1
                elif sum > 0:
                    right -= 1
                else:
                    left += 1
        return result


# 18. 4Sum
# Time complexity: O(n^3)
# Space complexity: O(1) (excluding output)      
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        result = []
        length = len(nums)
        for i in range(length):
            if i > 0 and nums[i] == nums[i-1]:
                continue # Skip duplicates for the first number
            for j in range(i+1, length):
                if j > i+1 and nums[j] == nums[j-1]:
                    continue # Skip duplicates for the second number
                left = j + 1
                right = length -1
                while left < right:
                    sum = nums[i] + nums[j] + nums[left] + nums[right]
                    # Found a valid quadruplet
                    if sum == target:
                        result.append([nums[i], nums[j], nums[left], nums[right]])
                        while left < right and nums[left] == nums[left+1]:
                            left += 1 # Skip duplicates for the third number
                        while right > left and nums[right] == nums[right -1]:
                            right -= 1 # Skip duplicates for the fourth number
                        left += 1
                        right -= 1
                    elif sum > target:
                        right -= 1
                    else:
                        left += 1
        return result    
